###############################################################################
! ! ! Newest Shit ! ! !
 
1. Prepare your Training Images: https://www.makesense.ai/
Best open source image labeling aka annotation tool!

2. Optional: use Roboflow to re-check if you've set your Lables correct:
How to Train YOLOv4 on a Custom Dataset (PyTorch)
https://www.youtube.com/watch?v=9hVgyeI4g4o
Warning: Only up to 1.000 images are free(!), above is payed service

3. Watch Video: Train YOLO to detect a custom object
https://www.youtube.com/watch?v=_FNfRtXEbr4

Side Notes: YOLOv4 expects/works best with multiples of 32 x 32px images!!!

###############################################################################
good Reads:

Heatmap for Logo Detection using OpenCV (Python)
https://www.learnopencv.com/heatmap-for-logo-detection-using-opencv-python/

https://github.com/akarshzingade/Logo-Detection-YOLOv2

https://github.com/ilmonteux/logohunter

###############################################################################
ORB: An efficient alternative to SIFT or SURF in 2011:
https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_feature2d/py_orb/py_orb.html
Example:

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('simple.jpg',0)

# Initiate STAR detector
orb = cv2.ORB()

# find the keypoints with ORB
kp = orb.detect(img,None)

# compute the descriptors with ORB
kp, des = orb.compute(img, kp)

# draw only keypoints location,not size and orientation
img2 = cv2.drawKeypoints(img,kp,color=(0,255,0), flags=0)
plt.imshow(img2),plt.show()
###############################################################################
